"use client";

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Check, X, Clock, Calendar, ChevronLeft, ChevronRight, Info, Loader2, Download } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/components/ui/use-toast';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { jsPDF } from 'jspdf';
import { API_URL } from "@/lib/api"

// Extend jsPDF to include lastAutoTable
declare module 'jspdf' {
  interface jsPDF {
    lastAutoTable: { finalY: number };
  }
}
import autoTable from 'jspdf-autotable';

type AttendanceRecord = {
  date: string;
  morningStatus: 'present' | 'absent' | 'late';
  eveningStatus: 'present' | 'absent' | 'late';
  markedBy?: string;
  isAutoGenerated?: boolean;
};

export default function HostelAttendancePage() {
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(true);
  const [currentDate, setCurrentDate] = useState(new Date());
  const [selectedDay, setSelectedDay] = useState<Date | null>(null);
  const [viewMode, setViewMode] = useState<'month' | 'day'>('month');
  const [attendanceData, setAttendanceData] = useState<Record<string, AttendanceRecord>>({});
  const [studentInfo, setStudentInfo] = useState({
    name: 'Loading...',
    studentId: 'Loading...',
    room: 'Loading...',
    profileImage: ''
  });

  const monthNames = ["January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December"
  ];
  const dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

  // Fetch student attendance data
  useEffect(() => {
    const fetchData = async () => {
      try {
        setIsLoading(true);
        
        // Fetch student info
        const studentRes = await fetch(`${API_URL}/api/student/profile`, {
          credentials: 'include'
        });
        const studentData = await studentRes.json();
        
        if (studentData.success) {
          setStudentInfo({
            name: studentData.data.name || 'Student',
            studentId: studentData.data.studentId || 'N/A',
            room: ` ${studentData.data.roomId?.roomNumber || 'N/A'}`,
            profileImage: studentData.data.image || ''
          });
        }

        // Fetch attendance records
        const attendanceRes = await fetch(`${API_URL}/api/student/attendance`, {
          credentials: 'include'
        });
        const attendanceData = await attendanceRes.json();
        
        if (attendanceData.success) {
          const formattedData: Record<string, AttendanceRecord> = {};
          attendanceData.data.forEach((record: any) => {
            const dateStr = new Date(record.date).toISOString().split('T')[0];
            formattedData[dateStr] = {
              date: dateStr,
              morningStatus: record.morningStatus || 'absent',
              eveningStatus: record.eveningStatus || 'absent',
              markedBy: record.markedBy,
              isAutoGenerated: record.isAutoGenerated
            };
          });
          setAttendanceData(formattedData);
        }
      } catch (error) {
        toast({
          title: "Error",
          description: "Failed to load attendance data",
          variant: "destructive"
        });
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [toast]);

  // Calculate stats based on marked dates only
  const getMonthStats = () => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    
    let presentDays = 0, absentDays = 0, lateDays = 0;
    let morningPresent = 0, morningAbsent = 0, morningLate = 0;
    let eveningPresent = 0, eveningAbsent = 0, eveningLate = 0;
    let totalMarkedDays = 0;
    
    // Filter attendance data for current month/year
    const monthAttendance = Object.entries(attendanceData).filter(([dateStr]) => {
      const date = new Date(dateStr);
      return date.getFullYear() === year && date.getMonth() === month;
    });
    
    totalMarkedDays = monthAttendance.length;
    
    monthAttendance.forEach(([_, record]) => {
      // Morning status
      if (record.morningStatus === 'present') morningPresent++;
      else if (record.morningStatus === 'absent') morningAbsent++;
      else if (record.morningStatus === 'late') morningLate++;
      
      // Evening status
      if (record.eveningStatus === 'present') eveningPresent++;
      else if (record.eveningStatus === 'absent') eveningAbsent++;
      else if (record.eveningStatus === 'late') eveningLate++;
      
      // Overall day status (count as present only if both sessions are present)
      if (record.morningStatus === 'present' && record.eveningStatus === 'present') {
        presentDays++;
      } else if (record.morningStatus === 'absent' && record.eveningStatus === 'absent') {
        absentDays++;
      } else {
        lateDays++; // Partial attendance
      }
    });
    
    const attendancePercentage = totalMarkedDays > 0 ? Math.round((presentDays / totalMarkedDays) * 100) : 0;
    
    return { 
      presentDays, 
      absentDays, 
      lateDays,
      totalMarkedDays,
      attendancePercentage,
      morningPresent,
      morningAbsent,
      morningLate,
      eveningPresent,
      eveningAbsent,
      eveningLate
    };
  };

  const monthStats = getMonthStats();

  // Generate days for current month
  const generateMonthDays = () => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const firstDayOfMonth = new Date(year, month, 1).getDay();
    
    const days = [];
    
    // Add empty cells for days before the 1st of the month
    for (let i = 0; i < firstDayOfMonth; i++) {
      days.push(null);
    }
    
    // Add days of the month
    for (let day = 1; day <= daysInMonth; day++) {
      const date = new Date(year, month, day);
      const dateStr = date.toISOString().split('T')[0];
      const record = attendanceData[dateStr];
      
      days.push({
        dayOfMonth: day,
        ...record
      });
    }
    
    return days;
  };

  const monthDays = generateMonthDays();

  // Handle month navigation
  const changeMonth = (direction: 'prev' | 'next') => {
    setCurrentDate(prev => {
      const newDate = new Date(prev);
      if (direction === 'prev') {
        newDate.setMonth(newDate.getMonth() - 1);
      } else {
        newDate.setMonth(newDate.getMonth() + 1);
      }
      return newDate;
    });
  };

  // Handle day selection
  const handleDayClick = (day: { date: string, dayOfMonth: number, morningStatus?: string, eveningStatus?: string }) => {
    setSelectedDay(new Date(day.date));
    setViewMode('day');
  };

  // Handle back to month view
  const handleBackToMonth = () => {
    setViewMode('month');
    setSelectedDay(null);
  };

  // Get status display info
  const getStatusDisplay = (status?: string) => {
    switch (status) {
      case 'present':
        return { icon: <Check className="h-4 w-4" />, color: 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-200', text: 'Present' };
      case 'absent':
        return { icon: <X className="h-4 w-4" />, color: 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-200', text: 'Absent' };
      case 'late':
        return { icon: <Clock className="h-4 w-4" />, color: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-200', text: 'Late' };
      default:
        return { icon: null, color: 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200', text: 'No record' };
    }
  };

  // Determine overall day status
  const getDayStatus = (morningStatus?: string, eveningStatus?: string) => {
    if (!morningStatus && !eveningStatus) return 'no-record';
    if (morningStatus === 'present' && eveningStatus === 'present') return 'present';
    if (morningStatus === 'absent' && eveningStatus === 'absent') return 'absent';
    return 'partial';
  };

  // Generate PDF report

const generatePDFReport = () => {
    const doc = new jsPDF();
    
    // Add header
    doc.setFontSize(20);
    doc.setTextColor(79, 70, 229);
    doc.text('Goel Group Of Institution Hostel Attendance Report', 105, 20, { align: 'center' });
    
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 105, 30, { align: 'center' });
    
    // Student information
    doc.setFontSize(14);
    doc.text('Student Information', 14, 40);
    
    doc.setFontSize(12);
    doc.text(`Name: ${studentInfo.name}`, 14, 50);
    doc.text(`Student ID: ${studentInfo.studentId}`, 14, 60);
    doc.text(`Room: ${studentInfo.room}`, 14, 70);
    
    // Monthly summary
    doc.setFontSize(14);
    doc.text('Monthly Summary', 14, 85);
    
    const summaryData = [
      ['Attendance Rate', `${monthStats.attendancePercentage}%`],
      ['Present Days', monthStats.presentDays],
      ['Absent Days', monthStats.absentDays],
      ['Morning Present', monthStats.morningPresent],
      ['Morning Absent', monthStats.morningAbsent],
      ['Evening Present', monthStats.eveningPresent],
      ['Evening Absent', monthStats.eveningAbsent],
    ];
    
    autoTable(doc, {
      startY: 90,
      head: [['Metric', 'Value']],
      body: summaryData,
      theme: 'grid',
      headStyles: { fillColor: [79, 70, 229] },
    });
    
    // Detailed attendance
    doc.setFontSize(14);
    const lastTable = autoTable(doc, {
      startY: 90,
      head: [['Metric', 'Value']],
      body: summaryData,
      theme: 'grid',
      headStyles: { fillColor: [79, 70, 229] },
    });

    doc.text('Detailed Attendance', 14, doc.lastAutoTable.finalY + 15);
    
    const attendanceRows = Object.entries(attendanceData)
      .filter(([dateStr]) => {
        const date = new Date(dateStr);
        return date.getFullYear() === currentDate.getFullYear() && date.getMonth() === currentDate.getMonth();
      })
      .map(([dateStr, record]) => {
        const date = new Date(dateStr);
        return [
          date.toLocaleDateString(),
          dayNames[date.getDay()],
          record.morningStatus.toUpperCase(),
          record.eveningStatus.toUpperCase(),
          'Admin', // Changed from record.markedBy to 'Admin'
          record.isAutoGenerated ? 'Yes' : 'No'
        ];
      });
    
    autoTable(doc, {
      startY: doc.lastAutoTable.finalY + 20,
      head: [['Date', 'Day', 'Morning', 'Evening', 'Marked By', 'Auto']],
      body: attendanceRows,
      theme: 'grid',
      headStyles: { fillColor: [79, 70, 229] },
    });
    
    // Footer
    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text('Goel Group Of Institution - Hostel Management System', 105, doc.internal.pageSize.height - 10, { align: 'center' });
    
    // Save the PDF
    doc.save(`Attendance_Report_${studentInfo.studentId}_${monthNames[currentDate.getMonth()]}_${currentDate.getFullYear()}.pdf`);
    
    toast({
      title: "Report Generated",
      description: "Your attendance report has been downloaded successfully.",
    });
};

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-center space-y-4">
          <Loader2 className="h-12 w-12 animate-spin text-indigo-600 mx-auto" />
          <p className="text-gray-600">Loading attendance records...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto py-8 px-4">
      <div className="flex flex-col gap-6">
        {/* Header */}
        <div className="flex flex-col gap-2">
          <h1 className="text-3xl font-bold tracking-tight text-gray-900 dark:text-white">
            Hostel <span className="text-indigo-600 dark:text-indigo-400">Attendance</span>
          </h1>
          <CardDescription className="text-gray-600 dark:text-gray-400">
            {viewMode === 'month' ? 'Monthly overview of your attendance' : 'Daily attendance details'}
          </CardDescription>
        </div>

        {/* Student Info */}
        <Card className="border border-indigo-200 dark:border-indigo-900/50 shadow-sm bg-gradient-to-r from-indigo-50 to-indigo-100 dark:from-indigo-900/10 dark:to-indigo-900/20">
          <CardContent className="p-4 flex items-center gap-4">
            <Avatar className="h-12 w-12 border-2 border-indigo-300 dark:border-indigo-600">
              <AvatarImage src={studentInfo.profileImage} />
              <AvatarFallback className="bg-indigo-100 dark:bg-indigo-900 text-indigo-600 dark:text-indigo-300">
                {studentInfo.name.split(' ').map(n => n[0]).join('')}
              </AvatarFallback>
            </Avatar>
            <div>
              <h2 className="font-semibold text-gray-900 dark:text-white">{studentInfo.name}</h2>
              <div className="flex gap-4 mt-1 text-sm text-indigo-600 dark:text-indigo-300">
                <span>ID: {studentInfo.studentId}</span>
                <span>Room: {studentInfo.room}</span>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Month Selector */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            {viewMode === 'day' && (
              <Button 
                variant="outline" 
                size="sm" 
                onClick={handleBackToMonth}
                className="border-indigo-300 hover:bg-indigo-50 dark:border-indigo-700 dark:hover:bg-indigo-900/30"
              >
                <ChevronLeft className="h-4 w-4 mr-2 text-indigo-600 dark:text-indigo-300" /> 
                Back to Month
              </Button>
            )}
            
            <div className="flex items-center gap-2">
              <Calendar className="h-5 w-5 text-indigo-600 dark:text-indigo-400" />
              <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
                {viewMode === 'month' 
                  ? `${monthNames[currentDate.getMonth()]} ${currentDate.getFullYear()}`
                  : selectedDay?.toLocaleDateString('en-US', { weekday: 'long', month: 'long', day: 'numeric', year: 'numeric' })}
              </h2>
            </div>
          </div>
          
          {viewMode === 'month' && (
            <div className="flex gap-2">
              <Button 
                variant="outline" 
                size="sm" 
                onClick={() => changeMonth('prev')}
                className="border-indigo-300 hover:bg-indigo-50 dark:border-indigo-700 dark:hover:bg-indigo-900/30"
              >
                <ChevronLeft className="h-4 w-4 text-indigo-600 dark:text-indigo-300" />
              </Button>
              <Select
                value={currentDate.getMonth().toString()}
                onValueChange={(value) => {
                  const newDate = new Date(currentDate);
                  newDate.setMonth(parseInt(value));
                  setCurrentDate(newDate);
                }}
              >
                <SelectTrigger className="w-[150px] border-indigo-300 hover:border-indigo-400 dark:border-indigo-700 dark:hover:border-indigo-600">
                  <SelectValue placeholder="Select month" />
                </SelectTrigger>
                <SelectContent className="bg-white dark:bg-gray-900 border-indigo-200 dark:border-indigo-800">
                  {monthNames.map((month, index) => (
                    <SelectItem 
                      key={month} 
                      value={index.toString()}
                      className="hover:bg-indigo-50 dark:hover:bg-indigo-900/30"
                    >
                      {month}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <Button 
                variant="outline" 
                size="sm" 
                onClick={() => changeMonth('next')}
                className="border-indigo-300 hover:bg-indigo-50 dark:border-indigo-700 dark:hover:bg-indigo-900/30"
              >
                <ChevronRight className="h-4 w-4 text-indigo-600 dark:text-indigo-300" />
              </Button>
            </div>
          )}
        </div>

        {/* Stats Cards */}
        {viewMode === 'month' && (
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <Card className="border border-indigo-200 dark:border-indigo-800 shadow-sm bg-gradient-to-br from-indigo-50 to-white dark:from-indigo-900/10 dark:to-gray-900">
              <CardHeader className="flex flex-row items-center justify-between pb-2">
                <CardTitle className="text-sm font-medium text-gray-700 dark:text-gray-300">Attendance Rate</CardTitle>
                <div className="text-indigo-600 dark:text-indigo-400 font-medium">
                  {monthStats.attendancePercentage}%
                </div>
              </CardHeader>
              <CardContent>
                <div className="flex gap-1 h-2 bg-gray-100 dark:bg-gray-800 rounded-full overflow-hidden">
                  <div 
                    className="bg-gradient-to-r from-indigo-500 to-indigo-600 dark:from-indigo-400 dark:to-indigo-500" 
                    style={{ width: `${monthStats.attendancePercentage}%` }}
                  ></div>
                </div>
                <div className="flex justify-between mt-2 text-sm text-gray-600 dark:text-gray-400">
                  <span>{monthStats.presentDays} Full Days</span>
                  <span>{monthStats.totalMarkedDays} Marked Days</span>
                </div>
              </CardContent>
            </Card>

            <Card className="border border-green-200 dark:border-green-800 shadow-sm bg-gradient-to-br from-green-50 to-white dark:from-green-900/10 dark:to-gray-900">
              <CardHeader className="flex flex-row items-center justify-between pb-2">
                <CardTitle className="text-sm font-medium text-gray-700 dark:text-gray-300">Morning Present</CardTitle>
                <Check className="h-4 w-4 text-green-600 dark:text-green-400" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-gray-900 dark:text-white">{monthStats.morningPresent}</div>
                <p className="text-xs text-gray-500 dark:text-gray-400">
                  {monthStats.morningLate} late arrivals
                </p>
              </CardContent>
            </Card>

            <Card className="border border-red-200 dark:border-red-800 shadow-sm bg-gradient-to-br from-red-50 to-white dark:from-red-900/10 dark:to-gray-900">
              <CardHeader className="flex flex-row items-center justify-between pb-2">
                <CardTitle className="text-sm font-medium text-gray-700 dark:text-gray-300">Morning Absent</CardTitle>
                <X className="h-4 w-4 text-red-600 dark:text-red-400" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-gray-900 dark:text-white">{monthStats.morningAbsent}</div>
                <p className="text-xs text-gray-500 dark:text-gray-400">Morning sessions</p>
              </CardContent>
            </Card>

            <Card className="border border-yellow-200 dark:border-yellow-800 shadow-sm bg-gradient-to-br from-yellow-50 to-white dark:from-yellow-900/10 dark:to-gray-900">
              <CardHeader className="flex flex-row items-center justify-between pb-2">
                <CardTitle className="text-sm font-medium text-gray-700 dark:text-gray-300">Evening Present</CardTitle>
                <Check className="h-4 w-4 text-yellow-600 dark:text-yellow-400" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-gray-900 dark:text-white">{monthStats.eveningPresent}</div>
                <p className="text-xs text-gray-500 dark:text-gray-400">
                  {monthStats.eveningLate} late arrivals
                </p>
              </CardContent>
            </Card>
          </div>
        )}

        {/* Month View */}
        {viewMode === 'month' && (
          <Card className="border border-indigo-200 dark:border-indigo-800 shadow-sm bg-gradient-to-br from-indigo-50 to-white dark:from-indigo-900/10 dark:to-gray-900">
            <CardHeader>
              <CardTitle className="text-gray-900 dark:text-white">Monthly Calendar</CardTitle>
              <CardDescription className="text-gray-600 dark:text-gray-400">
                Showing attendance for {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-7 gap-2 mb-4">
                {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
                  <div key={day} className="text-center font-medium text-sm text-indigo-600 dark:text-indigo-300 py-2">
                    {day}
                  </div>
                ))}
              </div>
              
              <div className="grid grid-cols-7 gap-2">
                {monthDays.map((day, index) => {
                  if (!day) {
                    return <div key={index} className="aspect-square p-2"></div>;
                  }

                  const dayStatus = getDayStatus(day.morningStatus, day.eveningStatus);
                  const morningStatus = getStatusDisplay(day.morningStatus);
                  const eveningStatus = getStatusDisplay(day.eveningStatus);

                  let dayBgColor = 'bg-gray-50 dark:bg-gray-800/50';
                  let dayBorderColor = 'border-gray-200 dark:border-gray-700';
                  let dayTextColor = 'text-gray-800 dark:text-gray-200';
                  let dayHoverColor = 'hover:bg-gray-100 dark:hover:bg-gray-700/70';

                  if (dayStatus === 'present') {
                    dayBgColor = 'bg-green-50 dark:bg-green-900/20';
                    dayBorderColor = 'border-green-200 dark:border-green-800';
                    dayHoverColor = 'hover:bg-green-100 dark:hover:bg-green-900/30';
                  } else if (dayStatus === 'absent') {
                    dayBgColor = 'bg-red-50 dark:bg-red-900/20';
                    dayBorderColor = 'border-red-200 dark:border-red-800';
                    dayHoverColor = 'hover:bg-red-100 dark:hover:bg-red-900/30';
                  } else if (dayStatus === 'partial') {
                    dayBgColor = 'bg-yellow-50 dark:bg-yellow-900/20';
                    dayBorderColor = 'border-yellow-200 dark:border-yellow-800';
                    dayHoverColor = 'hover:bg-yellow-100 dark:hover:bg-yellow-900/30';
                  }

                  return (
                    <div 
                      key={index} 
                      className={`aspect-square p-2 rounded-md border transition-all cursor-pointer ${dayBgColor} ${dayBorderColor} ${dayTextColor} ${dayHoverColor} shadow-sm`}
                      onClick={() => handleDayClick(day)}
                    >
                      <div className="flex flex-col h-full">
                        <div className={`text-sm font-medium self-end px-1 rounded-full ${
                          day.date === new Date().toISOString().split('T')[0] 
                            ? 'bg-indigo-100 text-indigo-800 dark:bg-indigo-900/50 dark:text-indigo-200' 
                            : ''
                        }`}>
                          {day.dayOfMonth}
                        </div>
                        <div className="mt-auto flex justify-between gap-1">
                          <div className={`p-1 rounded text-xs flex items-center justify-center ${morningStatus.color}`}>
                            {morningStatus.icon || 'M'}
                          </div>
                          <div className={`p-1 rounded text-xs flex items-center justify-center ${eveningStatus.color}`}>
                            {eveningStatus.icon || 'E'}
                          </div>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Day View */}
        {viewMode === 'day' && selectedDay && (
          <Card className="border border-indigo-200 dark:border-indigo-800 shadow-sm bg-gradient-to-br from-indigo-50 to-white dark:from-indigo-900/10 dark:to-gray-900">
            <CardHeader>
              <CardTitle className="text-gray-900 dark:text-white">
                {selectedDay.toLocaleDateString('en-US', { weekday: 'long', month: 'long', day: 'numeric' })}
              </CardTitle>
              <CardDescription className="text-gray-600 dark:text-gray-400">
                {selectedDay.toLocaleDateString('en-US', { year: 'numeric' })}
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex flex-col gap-6">
                <div className="flex items-center justify-between p-4 border rounded-lg bg-white dark:bg-gray-900 border-indigo-200 dark:border-indigo-800">
                  <div className="flex items-center gap-4">
                    <div className="p-3 rounded-full bg-indigo-100 dark:bg-indigo-900/30">
                      <Calendar className="h-6 w-6 text-indigo-600 dark:text-indigo-400" />
                    </div>
                    <div>
                      <h3 className="font-semibold text-gray-900 dark:text-white">Hostel Attendance</h3>
                      <p className="text-sm text-gray-600 dark:text-gray-400">
                        {dayNames[selectedDay.getDay()]}, {selectedDay.toLocaleDateString()}
                      </p>
                    </div>
                  </div>
                  
                  <div>
                    {(() => {
                      const record = attendanceData[selectedDay.toISOString().split('T')[0]];
                      if (!record) {
                        return (
                          <Badge variant="outline" className="px-4 py-2 border-gray-300 dark:border-gray-600">
                            No record
                          </Badge>
                        );
                      }

                      const dayStatus = getDayStatus(record.morningStatus, record.eveningStatus);
                      
                      if (dayStatus === 'present') {
                        return (
                          <Badge className="bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200 px-4 py-2">
                            <Check className="h-4 w-4 mr-2" /> Fully Present
                          </Badge>
                        );
                      } else if (dayStatus === 'absent') {
                        return (
                          <Badge className="bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200 px-4 py-2">
                            <X className="h-4 w-4 mr-2" /> Fully Absent
                          </Badge>
                        );
                      } else {
                        return (
                          <Badge className="bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-200 px-4 py-2">
                            <Clock className="h-4 w-4 mr-2" /> Partially Present
                          </Badge>
                        );
                      }
                    })()}
                  </div>
                </div>
                
                {attendanceData[selectedDay.toISOString().split('T')[0]] && (
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <Card className="border border-indigo-200 dark:border-indigo-800">
                      <CardHeader className="pb-0">
                        <CardTitle className="text-sm font-medium flex items-center gap-2 text-gray-900 dark:text-white">
                          <Info className="h-4 w-4 text-indigo-600 dark:text-indigo-400" /> Morning Session
                        </CardTitle>
                      </CardHeader>
                      <CardContent className="pt-3">
                        <div className="flex items-center gap-2 mb-2">
                          {getStatusDisplay(attendanceData[selectedDay.toISOString().split('T')[0]].morningStatus).icon}
                          <span className="font-medium text-gray-900 dark:text-white">
                            {getStatusDisplay(attendanceData[selectedDay.toISOString().split('T')[0]].morningStatus).text}
                          </span>
                        </div>
                        {attendanceData[selectedDay.toISOString().split('T')[0]].isAutoGenerated && (
                          <p className="text-xs text-gray-500 dark:text-gray-400">Auto-generated record</p>
                        )}
                        {attendanceData[selectedDay.toISOString().split('T')[0]].markedBy && (
                          <p className="text-xs text-gray-500 dark:text-gray-400">
                            Marked by: {attendanceData[selectedDay.toISOString().split('T')[0]].markedBy}
                          </p>
                        )}
                      </CardContent>
                    </Card>

                    <Card className="border border-indigo-200 dark:border-indigo-800">
                      <CardHeader className="pb-0">
                        <CardTitle className="text-sm font-medium flex items-center gap-2 text-gray-900 dark:text-white">
                          <Info className="h-4 w-4 text-indigo-600 dark:text-indigo-400" /> Evening Session
                        </CardTitle>
                      </CardHeader>
                      <CardContent className="pt-3">
                        <div className="flex items-center gap-2 mb-2">
                          {getStatusDisplay(attendanceData[selectedDay.toISOString().split('T')[0]].eveningStatus).icon}
                          <span className="font-medium text-gray-900 dark:text-white">
                            {getStatusDisplay(attendanceData[selectedDay.toISOString().split('T')[0]].eveningStatus).text}
                          </span>
                        </div>
                        {attendanceData[selectedDay.toISOString().split('T')[0]].isAutoGenerated && (
                          <p className="text-xs text-gray-500 dark:text-gray-400">Auto-generated record</p>
                        )}
                        {attendanceData[selectedDay.toISOString().split('T')[0]].markedBy && (
                          <p className="text-xs text-gray-500 dark:text-gray-400">
                            Marked by: {attendanceData[selectedDay.toISOString().split('T')[0]].markedBy}
                          </p>
                        )}
                      </CardContent>
                    </Card>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Action Buttons */}
        <div className="flex justify-end">
          <Button 
            className="bg-indigo-600 hover:bg-indigo-700 dark:bg-indigo-700 dark:hover:bg-indigo-800 shadow-md"
            onClick={generatePDFReport}
          >
            <Download className="h-4 w-4 mr-2" />
            Download Report
          </Button>
        </div>
      </div>
    </div>
  );
}